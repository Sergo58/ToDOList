[{"F:\\IT\\src\\index.tsx":"1","F:\\IT\\src\\app\\app-reducer.ts":"2","F:\\IT\\src\\features\\TodolistsList\\todolists-reducer.ts":"3","F:\\IT\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"4","F:\\IT\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5","F:\\IT\\src\\api\\todolists-api.ts":"6","F:\\IT\\src\\app\\App.tsx":"7","F:\\IT\\src\\components\\AddItemForm\\AddItemForm.tsx":"8","F:\\IT\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","F:\\IT\\src\\features\\Login\\Login.tsx":"10","F:\\IT\\src\\components\\EditableSpan\\EditableSpan.tsx":"11","F:\\IT\\src\\features\\TodolistsList\\tasks-reducer.ts":"12","F:\\IT\\src\\app\\store.ts":"13","F:\\IT\\src\\features\\Login\\auth-reducer.ts":"14","F:\\IT\\src\\features\\TodolistsList\\TodolistsList.tsx":"15","F:\\IT\\src\\reportWebVitals.ts":"16"},{"size":643,"mtime":1611389400000,"results":"17","hashOfConfig":"18"},{"size":2093,"mtime":1614256017879,"results":"19","hashOfConfig":"18"},{"size":4585,"mtime":1597327450000,"results":"20","hashOfConfig":"18"},{"size":1092,"mtime":1596716576000,"results":"21","hashOfConfig":"18"},{"size":1773,"mtime":1596295538000,"results":"22","hashOfConfig":"18"},{"size":3032,"mtime":1614256526254,"results":"23","hashOfConfig":"18"},{"size":2646,"mtime":1614256927217,"results":"24","hashOfConfig":"18"},{"size":1595,"mtime":1596715562000,"results":"25","hashOfConfig":"18"},{"size":4193,"mtime":1596715250000,"results":"26","hashOfConfig":"18"},{"size":3723,"mtime":1614255323154,"results":"27","hashOfConfig":"18"},{"size":952,"mtime":1614258470167,"results":"28","hashOfConfig":"18"},{"size":5633,"mtime":1596722126000,"results":"29","hashOfConfig":"18"},{"size":1181,"mtime":1614251494809,"results":"30","hashOfConfig":"18"},{"size":2143,"mtime":1614256642927,"results":"31","hashOfConfig":"18"},{"size":4009,"mtime":1614256991852,"results":"32","hashOfConfig":"18"},{"size":425,"mtime":1607869388000,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1xbk74y",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\IT\\src\\index.tsx",[],["76","77"],"F:\\IT\\src\\app\\app-reducer.ts",[],"F:\\IT\\src\\features\\TodolistsList\\todolists-reducer.ts",["78"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","F:\\IT\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["79","80"],"F:\\IT\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["81","82","83"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["84","85"],"F:\\IT\\src\\api\\todolists-api.ts",[],"F:\\IT\\src\\app\\App.tsx",["86","87"],"F:\\IT\\src\\components\\AddItemForm\\AddItemForm.tsx",["88","89","90"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["91","92"],"F:\\IT\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["93","94","95","96","97","98"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","F:\\IT\\src\\features\\Login\\Login.tsx",["99","100","101"],"import React, {useCallback} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {addTaskTC} from \"../TodolistsList/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const LoginTS = useCallback(function (data:LoginParamsType) {\r\n        const thunk = loginTC(data)\r\n\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        }, validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n\r\n  LoginTS(values)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n\r\n                        {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                    {formik.touched.email&&formik.errors.email?<div style={{color:\"red\"}}>{formik.errors.email}</div>:null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.touched.password&&formik.errors.password?<div style={{color:\"red\"}}>{formik.errors.password}</div>:null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps(\"rememberMe\")}\r\n                            checked={formik.values.rememberMe}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","F:\\IT\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"F:\\IT\\src\\features\\TodolistsList\\tasks-reducer.ts",["102","103"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","F:\\IT\\src\\app\\store.ts",[],"F:\\IT\\src\\features\\Login\\auth-reducer.ts",["104","105"],"F:\\IT\\src\\features\\TodolistsList\\TodolistsList.tsx",["106","107","108","109","110","111","112","113"],"F:\\IT\\src\\reportWebVitals.ts",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":10,"column":45,"nodeType":"120","messageId":"121","endLine":10,"endColumn":47},{"ruleId":"114","replacedBy":"122"},{"ruleId":"116","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":15,"column":97,"nodeType":"126","endLine":15,"endColumn":130,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"125","line":20,"column":8,"nodeType":"126","endLine":20,"endColumn":41,"suggestions":"128"},{"ruleId":"124","severity":1,"message":"125","line":24,"column":8,"nodeType":"126","endLine":24,"endColumn":41,"suggestions":"129"},{"ruleId":"114","replacedBy":"130"},{"ruleId":"116","replacedBy":"131"},{"ruleId":"124","severity":1,"message":"132","line":36,"column":7,"nodeType":"126","endLine":36,"endColumn":9,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"134","line":40,"column":7,"nodeType":"126","endLine":40,"endColumn":9,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":9,"nodeType":"138","messageId":"139","endLine":2,"endColumn":12},{"ruleId":"136","severity":1,"message":"140","line":2,"column":14,"nodeType":"138","messageId":"139","endLine":2,"endColumn":20},{"ruleId":"136","severity":1,"message":"141","line":2,"column":22,"nodeType":"138","messageId":"139","endLine":2,"endColumn":33},{"ruleId":"114","replacedBy":"142"},{"ruleId":"116","replacedBy":"143"},{"ruleId":"124","severity":1,"message":"144","line":35,"column":8,"nodeType":"126","endLine":35,"endColumn":10,"suggestions":"145"},{"ruleId":"124","severity":1,"message":"125","line":39,"column":8,"nodeType":"126","endLine":39,"endColumn":42,"suggestions":"146"},{"ruleId":"124","severity":1,"message":"125","line":46,"column":8,"nodeType":"126","endLine":46,"endColumn":54,"suggestions":"147"},{"ruleId":"124","severity":1,"message":"125","line":48,"column":95,"nodeType":"126","endLine":48,"endColumn":134,"suggestions":"148"},{"ruleId":"124","severity":1,"message":"125","line":49,"column":101,"nodeType":"126","endLine":49,"endColumn":140,"suggestions":"149"},{"ruleId":"124","severity":1,"message":"125","line":50,"column":107,"nodeType":"126","endLine":50,"endColumn":146,"suggestions":"150"},{"ruleId":"136","severity":1,"message":"151","line":4,"column":9,"nodeType":"138","messageId":"139","endLine":4,"endColumn":18},{"ruleId":"124","severity":1,"message":"134","line":34,"column":8,"nodeType":"126","endLine":34,"endColumn":10,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":75,"column":28,"nodeType":"155","endLine":75,"endColumn":45},{"ruleId":"136","severity":1,"message":"156","line":5,"column":9,"nodeType":"138","messageId":"139","endLine":5,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":13,"column":94,"nodeType":"120","messageId":"121","endLine":13,"endColumn":96},{"ruleId":"136","severity":1,"message":"157","line":3,"column":35,"nodeType":"138","messageId":"139","endLine":3,"endColumn":47},{"ruleId":"136","severity":1,"message":"158","line":5,"column":9,"nodeType":"138","messageId":"139","endLine":5,"endColumn":18},{"ruleId":"124","severity":1,"message":"159","line":35,"column":8,"nodeType":"126","endLine":35,"endColumn":10,"suggestions":"160"},{"ruleId":"124","severity":1,"message":"134","line":40,"column":8,"nodeType":"126","endLine":40,"endColumn":10,"suggestions":"161"},{"ruleId":"124","severity":1,"message":"134","line":45,"column":8,"nodeType":"126","endLine":45,"endColumn":10,"suggestions":"162"},{"ruleId":"124","severity":1,"message":"134","line":50,"column":8,"nodeType":"126","endLine":50,"endColumn":10,"suggestions":"163"},{"ruleId":"124","severity":1,"message":"134","line":55,"column":8,"nodeType":"126","endLine":55,"endColumn":10,"suggestions":"164"},{"ruleId":"124","severity":1,"message":"134","line":60,"column":8,"nodeType":"126","endLine":60,"endColumn":10,"suggestions":"165"},{"ruleId":"124","severity":1,"message":"134","line":65,"column":8,"nodeType":"126","endLine":65,"endColumn":10,"suggestions":"166"},{"ruleId":"124","severity":1,"message":"134","line":70,"column":8,"nodeType":"126","endLine":70,"endColumn":10,"suggestions":"167"},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["168"],["169"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["170"],["171"],["172"],["168"],["169"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["173"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["174"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["168"],["169"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["175"],["176"],["177"],["178"],["179"],["180"],"'addTaskTC' is defined but never used.",["181"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setAppErrorAC' is defined but never used.","'todolistsAPI' is defined but never used.","'addTaskAC' is defined but never used.","React Hook useEffect has missing dependencies: 'demo' and 'dispatch'. Either include them or remove the dependency array.",["182"],["183"],["184"],["185"],["186"],["187"],["188"],["189"],"no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},{"desc":"190","fix":"192"},{"desc":"190","fix":"193"},{"desc":"194","fix":"195"},{"desc":"194","fix":"196"},{"desc":"197","fix":"198"},{"desc":"190","fix":"199"},{"desc":"190","fix":"200"},{"desc":"190","fix":"201"},{"desc":"190","fix":"202"},{"desc":"190","fix":"203"},{"desc":"194","fix":"204"},{"desc":"205","fix":"206"},{"desc":"194","fix":"207"},{"desc":"194","fix":"208"},{"desc":"194","fix":"209"},{"desc":"194","fix":"210"},{"desc":"194","fix":"211"},{"desc":"194","fix":"212"},{"desc":"194","fix":"213"},"Update the dependencies array to be: [props]",{"range":"214","text":"215"},{"range":"216","text":"215"},{"range":"217","text":"215"},"Update the dependencies array to be: [dispatch]",{"range":"218","text":"219"},{"range":"220","text":"219"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"221","text":"222"},{"range":"223","text":"215"},{"range":"224","text":"215"},{"range":"225","text":"215"},{"range":"226","text":"215"},{"range":"227","text":"215"},{"range":"228","text":"219"},"Update the dependencies array to be: [demo, dispatch]",{"range":"229","text":"230"},{"range":"231","text":"219"},{"range":"232","text":"219"},{"range":"233","text":"219"},{"range":"234","text":"219"},{"range":"235","text":"219"},{"range":"236","text":"219"},{"range":"237","text":"219"},[765,798],"[props]",[1071,1104],[1261,1294],[1256,1258],"[dispatch]",[1340,1342],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[945,947],[1306,1308],"[demo, dispatch]",[1477,1479],[1648,1650],[1853,1855],[2066,2068],[2267,2269],[2414,2416],[2593,2595]]