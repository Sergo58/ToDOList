[{"F:\\IT\\src\\index.tsx":"1","F:\\IT\\src\\app\\app-reducer.ts":"2","F:\\IT\\src\\features\\TodolistsList\\todolists-reducer.ts":"3","F:\\IT\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"4","F:\\IT\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5","F:\\IT\\src\\api\\todolists-api.ts":"6","F:\\IT\\src\\app\\App.tsx":"7","F:\\IT\\src\\components\\AddItemForm\\AddItemForm.tsx":"8","F:\\IT\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","F:\\IT\\src\\features\\Login\\Login.tsx":"10","F:\\IT\\src\\components\\EditableSpan\\EditableSpan.tsx":"11","F:\\IT\\src\\features\\TodolistsList\\tasks-reducer.ts":"12","F:\\IT\\src\\app\\store.ts":"13","F:\\IT\\src\\features\\Login\\auth-reducer.ts":"14","F:\\IT\\src\\features\\TodolistsList\\TodolistsList.tsx":"15","F:\\IT\\src\\reportWebVitals.ts":"16","F:\\IT\\src\\utils\\error-utils.ts":"17"},{"size":664,"mtime":1619896865290,"results":"18","hashOfConfig":"19"},{"size":2478,"mtime":1619896865083,"results":"20","hashOfConfig":"19"},{"size":4585,"mtime":1619896865246,"results":"21","hashOfConfig":"19"},{"size":1092,"mtime":1619896865086,"results":"22","hashOfConfig":"19"},{"size":1773,"mtime":1619896865170,"results":"23","hashOfConfig":"19"},{"size":3014,"mtime":1619929743267,"results":"24","hashOfConfig":"19"},{"size":2653,"mtime":1619942327968,"results":"25","hashOfConfig":"19"},{"size":1595,"mtime":1619896865085,"results":"26","hashOfConfig":"19"},{"size":4193,"mtime":1619896865173,"results":"27","hashOfConfig":"19"},{"size":3723,"mtime":1619896865107,"results":"28","hashOfConfig":"19"},{"size":952,"mtime":1594154725462,"results":"29","hashOfConfig":"19"},{"size":5633,"mtime":1619896865241,"results":"30","hashOfConfig":"19"},{"size":1181,"mtime":1619896865084,"results":"31","hashOfConfig":"19"},{"size":2105,"mtime":1619896865130,"results":"32","hashOfConfig":"19"},{"size":4017,"mtime":1619896865234,"results":"33","hashOfConfig":"19"},{"size":440,"mtime":1619896865291,"results":"34","hashOfConfig":"19"},{"size":811,"mtime":1619896865295,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xbk74y",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"F:\\IT\\src\\index.tsx",[],"F:\\IT\\src\\app\\app-reducer.ts",[],["81","82"],"F:\\IT\\src\\features\\TodolistsList\\todolists-reducer.ts",["83"],"F:\\IT\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"F:\\IT\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["84","85","86"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","F:\\IT\\src\\api\\todolists-api.ts",[],"F:\\IT\\src\\app\\App.tsx",["87","88"],"import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const initialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch=useDispatch()\r\n\r\n\r\n\r\n    let logOutHandler=useCallback(()=>{\r\n        dispatch(logOutTC())\r\n    },[])\r\n\r\n    if (!initialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n  <BrowserRouter>\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n             { status === 'loading' &&  <LinearProgress /> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                <Route exact path={'/'} render={()=><TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={()=><Login/>} />\r\n                <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n  </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","F:\\IT\\src\\components\\AddItemForm\\AddItemForm.tsx",["89","90","91"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","F:\\IT\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["92","93","94","95","96","97"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","F:\\IT\\src\\features\\Login\\Login.tsx",["98","99","100"],"import React, {useCallback} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {addTaskTC} from \"../TodolistsList/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const LoginTS = useCallback(function (data:LoginParamsType) {\r\n        const thunk = loginTC(data)\r\n\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        }, validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n\r\n  LoginTS(values)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n\r\n                        {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                    {formik.touched.email&&formik.errors.email?<div style={{color:\"red\"}}>{formik.errors.email}</div>:null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.touched.password&&formik.errors.password?<div style={{color:\"red\"}}>{formik.errors.password}</div>:null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps(\"rememberMe\")}\r\n                            checked={formik.values.rememberMe}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","F:\\IT\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"F:\\IT\\src\\features\\TodolistsList\\tasks-reducer.ts",["101","102"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","F:\\IT\\src\\app\\store.ts",[],["103","104"],"F:\\IT\\src\\features\\Login\\auth-reducer.ts",["105","106"],"import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, todolistsAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {addTaskAC} from \"../TodolistsList/tasks-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data:LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res=>{\r\n\r\n            if (res.data.resultCode === 0) {\r\n\r\n                const action = setIsLoggedInAC(true)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })}\r\n\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n\r\n","F:\\IT\\src\\features\\TodolistsList\\TodolistsList.tsx",["107","108","109","110","111","112","113","114"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    useEffect(()=>{\r\n        if(demo||!isLoggedIn){\r\n            return;\r\n        }\r\n        const thunk=fetchTodolistsTC()\r\n        dispatch(thunk)\r\n\r\n    },[])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","F:\\IT\\src\\reportWebVitals.ts",[],["115","116"],"F:\\IT\\src\\utils\\error-utils.ts",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":10,"column":45,"nodeType":"123","messageId":"124","endLine":10,"endColumn":47},{"ruleId":"125","severity":1,"message":"126","line":15,"column":97,"nodeType":"127","endLine":15,"endColumn":130,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"126","line":20,"column":8,"nodeType":"127","endLine":20,"endColumn":41,"suggestions":"129"},{"ruleId":"125","severity":1,"message":"126","line":24,"column":8,"nodeType":"127","endLine":24,"endColumn":41,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"131","line":30,"column":7,"nodeType":"127","endLine":30,"endColumn":9,"suggestions":"132"},{"ruleId":"125","severity":1,"message":"133","line":41,"column":7,"nodeType":"127","endLine":41,"endColumn":9,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":9,"nodeType":"137","messageId":"138","endLine":2,"endColumn":12},{"ruleId":"135","severity":1,"message":"139","line":2,"column":14,"nodeType":"137","messageId":"138","endLine":2,"endColumn":20},{"ruleId":"135","severity":1,"message":"140","line":2,"column":22,"nodeType":"137","messageId":"138","endLine":2,"endColumn":33},{"ruleId":"125","severity":1,"message":"141","line":35,"column":8,"nodeType":"127","endLine":35,"endColumn":10,"suggestions":"142"},{"ruleId":"125","severity":1,"message":"126","line":39,"column":8,"nodeType":"127","endLine":39,"endColumn":42,"suggestions":"143"},{"ruleId":"125","severity":1,"message":"126","line":46,"column":8,"nodeType":"127","endLine":46,"endColumn":54,"suggestions":"144"},{"ruleId":"125","severity":1,"message":"126","line":48,"column":95,"nodeType":"127","endLine":48,"endColumn":134,"suggestions":"145"},{"ruleId":"125","severity":1,"message":"126","line":49,"column":101,"nodeType":"127","endLine":49,"endColumn":140,"suggestions":"146"},{"ruleId":"125","severity":1,"message":"126","line":50,"column":107,"nodeType":"127","endLine":50,"endColumn":146,"suggestions":"147"},{"ruleId":"135","severity":1,"message":"148","line":4,"column":9,"nodeType":"137","messageId":"138","endLine":4,"endColumn":18},{"ruleId":"125","severity":1,"message":"133","line":34,"column":8,"nodeType":"127","endLine":34,"endColumn":10,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":75,"column":28,"nodeType":"152","endLine":75,"endColumn":45},{"ruleId":"135","severity":1,"message":"153","line":5,"column":9,"nodeType":"137","messageId":"138","endLine":5,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":13,"column":94,"nodeType":"123","messageId":"124","endLine":13,"endColumn":96},{"ruleId":"117","replacedBy":"154"},{"ruleId":"119","replacedBy":"155"},{"ruleId":"135","severity":1,"message":"156","line":3,"column":35,"nodeType":"137","messageId":"138","endLine":3,"endColumn":47},{"ruleId":"135","severity":1,"message":"157","line":5,"column":9,"nodeType":"137","messageId":"138","endLine":5,"endColumn":18},{"ruleId":"125","severity":1,"message":"158","line":36,"column":7,"nodeType":"127","endLine":36,"endColumn":9,"suggestions":"159"},{"ruleId":"125","severity":1,"message":"133","line":41,"column":8,"nodeType":"127","endLine":41,"endColumn":10,"suggestions":"160"},{"ruleId":"125","severity":1,"message":"133","line":46,"column":8,"nodeType":"127","endLine":46,"endColumn":10,"suggestions":"161"},{"ruleId":"125","severity":1,"message":"133","line":51,"column":8,"nodeType":"127","endLine":51,"endColumn":10,"suggestions":"162"},{"ruleId":"125","severity":1,"message":"133","line":56,"column":8,"nodeType":"127","endLine":56,"endColumn":10,"suggestions":"163"},{"ruleId":"125","severity":1,"message":"133","line":61,"column":8,"nodeType":"127","endLine":61,"endColumn":10,"suggestions":"164"},{"ruleId":"125","severity":1,"message":"133","line":66,"column":8,"nodeType":"127","endLine":66,"endColumn":10,"suggestions":"165"},{"ruleId":"125","severity":1,"message":"133","line":71,"column":8,"nodeType":"127","endLine":71,"endColumn":10,"suggestions":"166"},{"ruleId":"117","replacedBy":"167"},{"ruleId":"119","replacedBy":"168"},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["171"],["172"],["173"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["174"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["175"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["176"],["177"],["178"],["179"],["180"],["181"],"'addTaskTC' is defined but never used.",["182"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setAppErrorAC' is defined but never used.",["169"],["170"],"'todolistsAPI' is defined but never used.","'addTaskAC' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["183"],["184"],["185"],["186"],["187"],["188"],["189"],["190"],["169"],["170"],"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"191","fix":"193"},{"desc":"191","fix":"194"},{"desc":"195","fix":"196"},{"desc":"195","fix":"197"},{"desc":"198","fix":"199"},{"desc":"191","fix":"200"},{"desc":"191","fix":"201"},{"desc":"191","fix":"202"},{"desc":"191","fix":"203"},{"desc":"191","fix":"204"},{"desc":"195","fix":"205"},{"desc":"206","fix":"207"},{"desc":"195","fix":"208"},{"desc":"195","fix":"209"},{"desc":"195","fix":"210"},{"desc":"195","fix":"211"},{"desc":"195","fix":"212"},{"desc":"195","fix":"213"},{"desc":"195","fix":"214"},"Update the dependencies array to be: [props]",{"range":"215","text":"216"},{"range":"217","text":"216"},{"range":"218","text":"216"},"Update the dependencies array to be: [dispatch]",{"range":"219","text":"220"},{"range":"221","text":"220"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"222","text":"223"},{"range":"224","text":"216"},{"range":"225","text":"216"},{"range":"226","text":"216"},{"range":"227","text":"216"},{"range":"228","text":"216"},{"range":"229","text":"220"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"230","text":"231"},{"range":"232","text":"220"},{"range":"233","text":"220"},{"range":"234","text":"220"},{"range":"235","text":"220"},{"range":"236","text":"220"},{"range":"237","text":"220"},{"range":"238","text":"220"},[765,798],"[props]",[1071,1104],[1261,1294],[925,927],"[dispatch]",[1344,1346],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[945,947],[1314,1316],"[demo, dispatch, isLoggedIn]",[1485,1487],[1656,1658],[1861,1863],[2074,2076],[2275,2277],[2422,2424],[2601,2603]]