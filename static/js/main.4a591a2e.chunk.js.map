{"version":3,"sources":["AddItemForm.tsx","EditAbleSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","size","variant","value","label","helperText","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","AddBox","EditAbleSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","changeToDoListTitle","id","removeToDoList","Delete","addTask","style","listStyle","padding","tasks","map","t","className","isDone","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","margin","App","todolistID1","v1","todolistID2","toDoLists","setToDoLists","setTasks","toDoListID","toDoListTasks","newTask","removeTasks","taskID","toDoList","find","tl","task","removeTodoList","toDolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","newToDoListId","newToDOList","spacing","tasksForTodoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4a591a2e.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, TextFields} from \"@material-ui/icons\";\ntype AddItemFormType={\n    addItem:(title:string)=>void\n}\nexport function AddItemForm(props:AddItemFormType) {\n    let [title, setTitle] = useState<string>(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim()!==\"\") {\n            props.addItem(title)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required\")\n        }\n\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setTitle(e.currentTarget.value)\n\n\n\n    }\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem();\n        }\n    }\n\n    return (\n        <div>\n           {/* <input\n                value={title}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyUpHandler}\n                className={error ? \"error\" : \"\"}\n            />*/}\n\n            <TextField\n                size={\"small\"}\n                variant={\"outlined\"}\n                value={title}\n                label={\"Title\"}\n                helperText={error}\n                error={!!error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyUpHandler}\n\n            />\n\n            {/*<Button size={\"small\"} variant={\"contained\"} color={\"primary\"} onClick={addItem} >+</Button>*/}\n<IconButton onClick={addItem}\n            color={\"primary\"}\n>\n    <AddBox/>\n</IconButton>\n\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\n        </div>\n    )\n};","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditAbleSpanPropsType = {\n    value: string\n    changeValue:(value:string)=>void\n}\n\nexport function EditAbleSpan(props: EditAbleSpanPropsType) {\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [title, setTitle] = useState<string>(props.value)\n    const activatedEditMode = () => {\n        setEditMode(true)\n\n    }\n    const deActivatedEditMode = () => {\n        setEditMode(false)\n        props.changeValue(title)\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n\n    return editMode ?\n        <TextField\n            variant={\"outlined\"}\n            value={title}\n            onBlur={deActivatedEditMode}\n            autoFocus={true}\n            onChange={onChangeHandler}\n        />\n        /*<input\n            value={title}\n            onBlur={deActivatedEditMode}\n            autoFocus={true}\n            onChange={onChangeHandler}\n        />*/\n\n        :  <span onDoubleClick={activatedEditMode}>{props.value}</span>\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\nimport {FilterValuesType, TaskType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditAbleSpan} from \"./EditAbleSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype PropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    addTask: (title: string, toDoListID: string) => void\n    removeTask: (taskID: string, toDoListID: string) => void\n    changeFilter: (value: FilterValuesType, toDoListID: string) => void\n    changeStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\n    removeToDoList: (toDoListID: string) => void\n    changeTaskTitle: (taskID: string, title: string, toDoListID: string) => void\n    changeToDoListTitle:(title: string, toDoListID: string)=>void\n}\n\nexport function TodoList(props: PropsType) {\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.id)\n    };\n\n    const changeToDoListTitle=(title: string)=>{\n        props.changeToDoListTitle(title,props.id)\n    }\n\n\n    const onAllClickHandler = () => {\n        props.changeFilter(\"all\", props.id)\n    }\n    const onActiveClickHandler = () => {\n        props.changeFilter(\"active\", props.id)\n    }\n    const onCompletedClickHandler = () => {\n        props.changeFilter(\"completed\", props.id)\n    }\n    return (<div>\n\n        <h3>\n            <EditAbleSpan value={props.title} changeValue={changeToDoListTitle}/>\n\n            <IconButton onClick={() => {\n                props.removeToDoList(props.id)\n            } }><Delete/></IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n\n        <ul style={{listStyle:\"none\",padding:\"0\"}}>{\n            props.tasks.map(t => {\n                const removeTask = () => {\n                    props.removeTask(t.id, props.id)\n                }\n                const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n                    props.changeStatus(t.id, e.currentTarget.checked, props.id)\n                }\n                const changeTaskTitle = (value: string) => {\n                    props.changeTaskTitle(t.id, value, props.id)\n                }\n                return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n                  {/*  <input type=\"checkbox\"\n                           checked={t.isDone}\n                           onChange={changeStatus}\n                    />*/}\n                    <Checkbox\n                        color={\"primary\"}\n                        checked={t.isDone}\n                        onChange={changeStatus}\n\n                    />\n                    <EditAbleSpan value={t.title}\n                                  changeValue={changeTaskTitle}\n                    />\n                    <IconButton size={\"small\"} onClick={\n                        removeTask }><Delete/></IconButton>\n\n                </li>\n            })\n            }\n\n        </ul>\n        <div>\n            <Button\n                size={\"small\"}\n                color={props.filter === \"all\" ? \"primary\" : \"default\"}\n                variant={\"contained\"}\n                onClick={onAllClickHandler}\n                //className={props.filter === \"all\" ? \"active-filter\" : \"\"}\n            >All\n            </Button>\n            <Button\n                style={{margin:\"0 5px\"}}\n                size={\"small\"}\n                color={props.filter === \"active\" ? \"primary\" : \"default\"}\n                variant={\"contained\"}\n                onClick={onActiveClickHandler}\n                   // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\n            >Active\n            </Button>\n            <Button\n                size={\"small\"}\n                color={props.filter === \"completed\"  ? \"primary\" : \"default\"}\n                variant={\"contained\"}\n                onClick={onCompletedClickHandler}\n                   // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\n            >Completed\n            </Button>\n        </div>\n    </div>)\n\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TodoList} from \"./TodoList\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {Menu} from \"@material-ui/icons\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type ToDoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\ntype TaskStateType = {\n    [key: string]: Array<TaskType>\n}\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\n\n\nfunction App() {\n\n    /*let [tasks, setTasks] = useState<Array<TaskType>>(\n        [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: false},\n            {id: v1(), title: \"React\", isDone: true},\n            {id: v1(), title: \"GraphQL\", isDone: true},\n            {id: v1(), title: \"Rest API\", isDone: true},\n            {id: v1(), title: \"Rest API2\", isDone: false}\n\n        ]\n    )*/\n\n    let todolistID1 = v1()\n    let todolistID2 = v1()\n\n    let [toDoLists, setToDoLists] = useState<Array<ToDoListType>>([\n        {id: todolistID1, title: \"What to learn\", filter: \"all\"},\n        {id: todolistID2, title: \"What to buy\", filter: \"all\"}\n    ])\n\n    let [tasks, setTasks] = useState<TaskStateType>({\n        [todolistID1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: false},\n            {id: v1(), title: \"React\", isDone: true},\n            {id: v1(), title: \"GraphQL\", isDone: true},\n            {id: v1(), title: \"Rest API\", isDone: true},\n            {id: v1(), title: \"TS\", isDone: false}],\n        [todolistID2]: [{id: v1(), title: \"Bread\", isDone: true},\n            {id: v1(), title: \"Books\", isDone: false},\n            {id: v1(), title: \"Butter\", isDone: true},\n            {id: v1(), title: \"Onion\", isDone: true},\n            {id: v1(), title: \"Beer\", isDone: true},\n            {id: v1(), title: \"Fish\", isDone: false}]\n    })\n\n    function addTask(title: string, toDoListID: string) {\n        let toDoListTasks = tasks[toDoListID]\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\n        tasks[toDoListID] = [newTask, ...toDoListTasks]\n        setTasks({...tasks})\n    }\n\n    function removeTasks(taskID: string, toDoListID: string) {\n        let toDoListTasks = tasks[toDoListID]\n        tasks[toDoListID] = toDoListTasks.filter(t => t.id !== taskID)\n        setTasks({...tasks})\n\n    }\n\n\n    function changeFilter(value: FilterValuesType, toDoListID: string) {\n        let toDoList = toDoLists.find(tl => tl.id === toDoListID)\n        if (toDoList) {\n            toDoList.filter = value\n            setToDoLists([...toDoLists])\n        }\n    }\n\n\n    function changeStatus(taskID: string, isDone: boolean, toDoListID: string) {\n        let toDoListTasks = tasks[toDoListID]\n        let task = toDoListTasks.find(t => t.id === taskID);\n        if (task) {\n            task.isDone = isDone;\n            setTasks({...tasks});\n        }\n    }\n\n    function removeTodoList(toDoListID: string) {\n        setToDoLists(toDoLists.filter(tl => tl.id !== toDoListID))\n        delete tasks[toDoListID]\n        setTasks({...tasks})\n    }\n\n    function addToDoList(title: string) {\n        const newToDoListId = v1()\n        const newToDOList: ToDoListType = {\n            id: newToDoListId,\n            title: title,\n            filter: \"all\"\n        }\n        setToDoLists([...toDoLists, newToDOList])\n        setTasks({...tasks, [newToDoListId]: []})\n    }\n\n    function changeTaskTitle(taskID: string, title: string, toDoListID: string) {\n        const toDOListTasks = tasks[toDoListID]\n        const task = toDOListTasks.find(task => task.id === taskID)\n        if (task) {\n            task.title = title\n            setTasks({...tasks})\n        }\n    }\n\n    function changeToDoListTitle(title: string, toDoListID: string) {\n        const toDolist = toDoLists.find(tl => tl.id === toDoListID)\n        if (toDolist) {\n            toDolist.title = title\n            setToDoLists([...toDoLists])\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid style={{padding: \"15px\"}} container>\n                    <AddItemForm addItem={addToDoList}/>\n                </Grid>\n                <Grid spacing={3} container>\n                    {\n                        toDoLists.map(tl => {\n                            let tasksForTodoList = tasks[tl.id];\n\n                            if (tl.filter === \"active\") {\n                                tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\n                            }\n                            if (tl.filter === \"completed\") {\n                                tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\n                            }\n                            return (\n                                <Grid item={true} key={tl.id}>\n                                    <Paper elevation={3} style={{padding: \"15px\"}}>\n                                        <TodoList\n                                            key={tl.id}\n                                            id={tl.id}\n                                            title={tl.title}\n                                            tasks={tasksForTodoList}\n                                            filter={tl.filter}\n                                            changeFilter={changeFilter}\n                                            removeToDoList={removeTodoList}\n                                            addTask={addTask}\n                                            removeTask={removeTasks}\n                                            changeStatus={changeStatus}\n                                            changeTaskTitle={changeTaskTitle}\n                                            changeToDoListTitle={changeToDoListTitle}\n\n\n                                        />\n                                    </Paper>\n                                </Grid>\n                            )\n\n                        })\n                    }\n                </Grid>\n            </Container>\n\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}